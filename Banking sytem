abstract class Account {
    protected String accountNumber;
    protected double balance;
    protected String accountHolderName;

    public Account(String accountNumber, String accountHolderName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = initialBalance;
    }
    public abstract void withdraw(double amount);

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: " + amount + ", New balance: " + balance);
    }
    public void transfer(Account targetAccount, double amount) {
        if (this.balance >= amount) {
            this.withdraw(amount);
            targetAccount.deposit(amount);
            System.out.println("Transferred " + amount + " to " + targetAccount.accountHolderName);
        } else {
            System.out.println("Insufficient funds for transfer.");
        }
    }
    public void checkBalance() {
        System.out.println("Account balance: " + balance);
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public String getAccountHolderName() {
        return accountHolderName;
    }
}

class SavingsAccount extends Account {

    private static final double MIN_BALANCE = 1000.0;

    public SavingsAccount(String accountNumber, String accountHolderName, double initialBalance) {
        super(accountNumber, accountHolderName, initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount >= MIN_BALANCE) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount + ", New balance: " + balance);
        } else {
            System.out.println("Cannot withdraw. Minimum balance of " + MIN_BALANCE + " must be maintained.");
        }
    }
}
class CurrentAccount extends Account {

    public CurrentAccount(String accountNumber, String accountHolderName, double initialBalance) {
        super(accountNumber, accountHolderName, initialBalance);
    }

    public void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount + ", New balance: " + balance);
        } else {
            System.out.println("Insufficient funds for withdrawal.");
        }
    }
}
class Customer {
    private String name;
    private String customerID;
    private Account account;

    public Customer(String name, String customerID, Account account) {
        this.name = name;
        this.customerID = customerID;
        this.account = account;
    }

    public void viewAccountDetails() {
        System.out.println("Customer Name: " + name);
        System.out.println("Account Number: " + account.getAccountNumber());
        account.checkBalance();
    }

    public void depositToAccount(double amount) {
        account.deposit(amount);
    }

    public void withdrawFromAccount(double amount) {
        account.withdraw(amount);
    }

    public void transferToAccount(Customer targetCustomer, double amount) {
        account.transfer(targetCustomer.account, amount);
    }
}

class Transaction {
    private String transactionID;
    private double amount;
    private String type; // Deposit, Withdrawal, Transfer
    private String date;

    public Transaction(String transactionID, double amount, String type, String date) {
        this.transactionID = transactionID;
        this.amount = amount;
        this.type = type;
        this.date = date;
    }

    public String toString() {
        return "Transaction ID: " + transactionID + ", Amount: " + amount + ", Type: " + type + ", Date: " + date;
    }
}
public class BankApplication {
    public static void main(String[] args) {
        Account savingsAccount = new SavingsAccount("S12345", "John Doe", 5000.0);
        Account currentAccount = new CurrentAccount("C12345", "Jane Smith", 3000.0);
        Customer customer1 = new Customer("John Doe", "C001", savingsAccount);
        Customer customer2 = new Customer("Jane Smith", "C002", currentAccount);
        customer1.viewAccountDetails();
        customer2.viewAccountDetails();
        customer1.depositToAccount(2000.0);
        customer2.depositToAccount(1000.0);
        customer1.withdrawFromAccount(1000.0);
        customer2.withdrawFromAccount(500.0);
        customer1.transferToAccount(customer2, 1500.0);
        customer1.viewAccountDetails();
        customer2.viewAccountDetails();
    }
}

