java
Copy
import java.io.Serializable;

public class Book implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private String bookId;
    private String title;
    private String author;
    private boolean isIssued;

    public Book(String bookId, String title, String author) {
        this.bookId = bookId;
        this.title = title;
        this.author = author;
        this.isIssued = false;
    }

    public String getBookId() {
        return bookId;
    }

    public void setBookId(String bookId) {
        this.bookId = bookId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public boolean isIssued() {
        return isIssued;
    }

    public void setIssued(boolean issued) {
        isIssued = issued;
    }

    @Override
    public String toString() {
        return "Book ID: " + bookId + ", Title: " + title + ", Author: " + author + ", Issued: " + isIssued;
    }
}
Member.java
java
Copy
import java.io.Serializable;

public class Member implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private String memberId;
    private String name;
    private String contactInfo;

    public Member(String memberId, String name, String contactInfo) {
        this.memberId = memberId;
        this.name = name;
        this.contactInfo = contactInfo;
    }

    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getContactInfo() {
        return contactInfo;
    }

    public void setContactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
    }

    @Override
    public String toString() {
        return "Member ID: " + memberId + ", Name: " + name + ", Contact: " + contactInfo;
    }
}
Transaction.java
java
Copy
import java.io.Serializable;

public class Transaction implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private String transactionId;
    private String bookId;
    private String memberId;
    private boolean isIssued; // true if issued, false if returned

    public Transaction(String transactionId, String bookId, String memberId, boolean isIssued) {
        this.transactionId = transactionId;
        this.bookId = bookId;
        this.memberId = memberId;
        this.isIssued = isIssued;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public String getBookId() {
        return bookId;
    }

    public void setBookId(String bookId) {
        this.bookId = bookId;
    }

    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public boolean isIssued() {
        return isIssued;
    }

    public void setIssued(boolean issued) {
        isIssued = issued;
    }

    @Override
    public String toString() {
        return "Transaction ID: " + transactionId + ", Book ID: " + bookId + ", Member ID: " + memberId + ", Issued: " + isIssued;
    }
}
LibraryManagementSystem.java
java
Copy
import java.io.*;
import java.util.*;

public class LibraryManagementSystem {
    private static final String BOOKS_FILE = "books.dat";
    private static final String MEMBERS_FILE = "members.dat";
    private static final String TRANSACTIONS_FILE = "transactions.dat";

    private List<Book> books;
    private List<Member> members;
    private List<Transaction> transactions;

    public LibraryManagementSystem() {
        books = loadBooks();
        members = loadMembers();
        transactions = loadTransactions();
    }

  // Load data from file (Books, Members, Transactions)
    private List<Book> loadBooks() {
        return loadData(BOOKS_FILE);
    }

    private List<Member> loadMembers() {
        return loadData(MEMBERS_FILE);
    }

    private List<Transaction> loadTransactions() {
        return loadData(TRANSACTIONS_FILE);
    }

    private <T> List<T> loadData(String filename) {
        List<T> list = new ArrayList<>();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            list = (List<T>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            // If file doesn't exist or is empty, just return an empty list
        }
        return list;
    }

    // Save data to file (Books, Members, Transactions)
    private <T> void saveData(List<T> data, String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(data);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void addBook(Book book) {
        books.add(book);
        saveData(books, BOOKS_FILE);
    }

    public void addMember(Member member) {
        members.add(member);
        saveData(members, MEMBERS_FILE);
    }

    public void issueBook(String bookId, String memberId) {
        Book book = findBook(bookId);
        Member member = findMember(memberId);
        
        if (book != null && member != null && !book.isIssued()) {
            book.setIssued(true);
            Transaction transaction = new Transaction(UUID.randomUUID().toString(), bookId, memberId, true);
            transactions.add(transaction);
            saveData(books, BOOKS_FILE);
            saveData(transactions, TRANSACTIONS_FILE);
            System.out.println("Book issued successfully!");
        } else {
            System.out.println("Book is already issued or invalid details.");
        }
    }

    public void returnBook(String bookId, String memberId) {
        Book book = findBook(bookId);
        Member member = findMember(memberId);

        if (book != null && member != null && book.isIssued()) {
            book.setIssued(false);
            Transaction transaction = new Transaction(UUID.randomUUID().toString(), bookId, memberId, false);
            transactions.add(transaction);
            saveData(books, BOOKS_FILE);
            saveData(transactions, TRANSACTIONS_FILE);
            System.out.println("Book returned successfully!");
        } else {
            System.out.println("Invalid transaction details.");
        }
    }

    private Book findBook(String bookId) {
        return books.stream().filter(b -> b.getBookId().equals(bookId)).findFirst().orElse(null);
    }

    private Member findMember(String memberId) {
        return members.stream().filter(m -> m.getMemberId().equals(memberId)).findFirst().orElse(null);
    }

    public void displayBooks() {
        books.forEach(System.out::println);
    }

    public void displayMembers() {
        members.forEach(System.out::println);
    }

    public void displayTransactions() {
        transactions.forEach(System.out::println);
    }

    public static void main(String[] args) {
        LibraryManagementSystem system = new LibraryManagementSystem();
        

        system.addBook(new Book("B001", "Java Programming", "Author A"));
        system.addBook(new Book("B002", "Data Structures", "Author B"));
        system.addMember(new Member("M001", "John Doe", "123456789"));
        system.addMember(new Member("M002", "Jane Smith", "987654321"));

        system.issueBook("B001", "M001");

     
        system.displayBooks();
        system.displayMembers();
        system.displayTransactions();

        
        system.returnBook("B001", "M001");

      
        system.displayBooks();
        system.displayTransactions();
    }
